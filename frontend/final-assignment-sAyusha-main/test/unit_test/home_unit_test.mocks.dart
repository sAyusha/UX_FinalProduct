// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_final_assignment/test/unit_test/home_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:io' as _i12;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_final_assignment/core/failure/failure.dart' as _i9;
import 'package:flutter_final_assignment/features/bidding/domain/entity/bidding_entity.dart'
    as _i16;
import 'package:flutter_final_assignment/features/bidding/domain/repository/bid_repository.dart'
    as _i5;
import 'package:flutter_final_assignment/features/bidding/domain/use_case/bid_use_case.dart'
    as _i15;
import 'package:flutter_final_assignment/features/home/domain/entity/home_entity.dart'
    as _i10;
import 'package:flutter_final_assignment/features/home/domain/repository/home_repository.dart'
    as _i2;
import 'package:flutter_final_assignment/features/home/domain/use_case/home_use_case.dart'
    as _i7;
import 'package:flutter_final_assignment/features/order_summary/domain/entity/order_entity.dart'
    as _i18;
import 'package:flutter_final_assignment/features/order_summary/domain/repository/order_repository.dart'
    as _i6;
import 'package:flutter_final_assignment/features/order_summary/domain/use_case/order_use_case.dart'
    as _i17;
import 'package:flutter_final_assignment/features/profile/domain/entity/password_entity.dart'
    as _i14;
import 'package:flutter_final_assignment/features/profile/domain/entity/profile_entity.dart'
    as _i13;
import 'package:flutter_final_assignment/features/profile/domain/repository/profile_repository.dart'
    as _i4;
import 'package:flutter_final_assignment/features/profile/domain/use_case/profile_use_case.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIHomeRepository_0 extends _i1.SmartFake
    implements _i2.IHomeRepository {
  _FakeIHomeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIProfileRepository_2 extends _i1.SmartFake
    implements _i4.IProfileRepository {
  _FakeIProfileRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIBidRepository_3 extends _i1.SmartFake
    implements _i5.IBidRepository {
  _FakeIBidRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOrderRepository_4 extends _i1.SmartFake
    implements _i6.IOrderRepository {
  _FakeIOrderRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeUseCase extends _i1.Mock implements _i7.HomeUseCase {
  @override
  _i2.IHomeRepository get homeRepository => (super.noSuchMethod(
        Invocation.getter(#homeRepository),
        returnValue: _FakeIHomeRepository_0(
          this,
          Invocation.getter(#homeRepository),
        ),
        returnValueForMissingStub: _FakeIHomeRepository_0(
          this,
          Invocation.getter(#homeRepository),
        ),
      ) as _i2.IHomeRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>> getAllArt() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllArt,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getAllArt,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getAllArt,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> addArt(_i10.HomeEntity? art) =>
      (super.noSuchMethod(
        Invocation.method(
          #addArt,
          [art],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #addArt,
            [art],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #addArt,
            [art],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>> getSavedArts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedArts,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getSavedArts,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getSavedArts,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> saveArt(String? artId) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveArt,
          [artId],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #saveArt,
            [artId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #saveArt,
            [artId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> unsaveArt(String? artId) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsaveArt,
          [artId],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #unsaveArt,
            [artId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #unsaveArt,
            [artId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>> getAlertArts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlertArts,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getAlertArts,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getAlertArts,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> alertArt(String? artId) =>
      (super.noSuchMethod(
        Invocation.method(
          #alertArt,
          [artId],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #alertArt,
            [artId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #alertArt,
            [artId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> unAlertArt(String? artId) =>
      (super.noSuchMethod(
        Invocation.method(
          #unAlertArt,
          [artId],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #unAlertArt,
            [artId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #unAlertArt,
            [artId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>> getUserArts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserArts,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getUserArts,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getUserArts,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> deleteArt(String? artId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteArt,
          [artId],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #deleteArt,
            [artId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #deleteArt,
            [artId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> updateArt(
    String? title,
    String? startingBid,
    String? artId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateArt,
          [
            title,
            startingBid,
            artId,
          ],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #updateArt,
            [
              title,
              startingBid,
              artId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #updateArt,
            [
              title,
              startingBid,
              artId,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>> getArtById(
          String? artId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArtById,
          [artId],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getArtById,
            [artId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.HomeEntity>>(
          this,
          Invocation.method(
            #getArtById,
            [artId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.HomeEntity>>>);
}

/// A class which mocks [ProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileUseCase extends _i1.Mock implements _i11.ProfileUseCase {
  @override
  _i4.IProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeIProfileRepository_2(
          this,
          Invocation.getter(#profileRepository),
        ),
        returnValueForMissingStub: _FakeIProfileRepository_2(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i4.IProfileRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, String>> uploadProfilePicture(
          _i12.File? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadProfilePicture,
          [file],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, String>>.value(
            _FakeEither_1<_i9.Failure, String>(
          this,
          Invocation.method(
            #uploadProfilePicture,
            [file],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, String>>.value(
                _FakeEither_1<_i9.Failure, String>(
          this,
          Invocation.method(
            #uploadProfilePicture,
            [file],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, String>>);
  @override
  _i8.Future<
      _i3
          .Either<_i9.Failure, List<_i13.ProfileEntity>>> getUserProfile() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i13.ProfileEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i13.ProfileEntity>>(
          this,
          Invocation.method(
            #getUserProfile,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i13.ProfileEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i13.ProfileEntity>>(
          this,
          Invocation.method(
            #getUserProfile,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i13.ProfileEntity>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> changePassword(
          _i14.PasswordEntity? password) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [password],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #changePassword,
            [password],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #changePassword,
            [password],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> editProfile(
          _i13.ProfileEntity? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #editProfile,
          [profile],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #editProfile,
            [profile],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #editProfile,
            [profile],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
}

/// A class which mocks [BidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBidUseCase extends _i1.Mock implements _i15.BidUseCase {
  @override
  _i5.IBidRepository get bidRepository => (super.noSuchMethod(
        Invocation.getter(#bidRepository),
        returnValue: _FakeIBidRepository_3(
          this,
          Invocation.getter(#bidRepository),
        ),
        returnValueForMissingStub: _FakeIBidRepository_3(
          this,
          Invocation.getter(#bidRepository),
        ),
      ) as _i5.IBidRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> bidOnArt(
    _i16.BidEntity? bid,
    String? artId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #bidOnArt,
          [
            bid,
            artId,
          ],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #bidOnArt,
            [
              bid,
              artId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #bidOnArt,
            [
              bid,
              artId,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i16.BidEntity>>> getAllBids() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllBids,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i16.BidEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i16.BidEntity>>(
          this,
          Invocation.method(
            #getAllBids,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i16.BidEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i16.BidEntity>>(
          this,
          Invocation.method(
            #getAllBids,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i16.BidEntity>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i16.BidEntity>>> getBid(
          String? bidId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBid,
          [bidId],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i16.BidEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i16.BidEntity>>(
          this,
          Invocation.method(
            #getBid,
            [bidId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i16.BidEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i16.BidEntity>>(
          this,
          Invocation.method(
            #getBid,
            [bidId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i16.BidEntity>>>);
}

/// A class which mocks [OrderUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderUseCase extends _i1.Mock implements _i17.OrderUseCase {
  @override
  _i6.IOrderRepository get orderRepository => (super.noSuchMethod(
        Invocation.getter(#orderRepository),
        returnValue: _FakeIOrderRepository_4(
          this,
          Invocation.getter(#orderRepository),
        ),
        returnValueForMissingStub: _FakeIOrderRepository_4(
          this,
          Invocation.getter(#orderRepository),
        ),
      ) as _i6.IOrderRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> addOrder(
    _i18.OrderEntity? order,
    String? artId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrder,
          [
            order,
            artId,
          ],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #addOrder,
            [
              order,
              artId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #addOrder,
            [
              order,
              artId,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i18.OrderEntity>>> getYourOrder() =>
      (super.noSuchMethod(
        Invocation.method(
          #getYourOrder,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i18.OrderEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i18.OrderEntity>>(
          this,
          Invocation.method(
            #getYourOrder,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i18.OrderEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i18.OrderEntity>>(
          this,
          Invocation.method(
            #getYourOrder,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i18.OrderEntity>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i18.OrderEntity>>> getOrderById(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i18.OrderEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i18.OrderEntity>>(
          this,
          Invocation.method(
            #getOrderById,
            [orderId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i18.OrderEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i18.OrderEntity>>(
          this,
          Invocation.method(
            #getOrderById,
            [orderId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i18.OrderEntity>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> updateOrderToPaid(
          String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrderToPaid,
          [orderId],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #updateOrderToPaid,
            [orderId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #updateOrderToPaid,
            [orderId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
}
